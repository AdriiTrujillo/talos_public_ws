// Generated by gencpp from file astronaut_controllers/plot_msg.msg
// DO NOT EDIT!


#ifndef ASTRONAUT_CONTROLLERS_MESSAGE_PLOT_MSG_H
#define ASTRONAUT_CONTROLLERS_MESSAGE_PLOT_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace astronaut_controllers
{
template <class ContainerAllocator>
struct plot_msg_
{
  typedef plot_msg_<ContainerAllocator> Type;

  plot_msg_()
    : x_err(0.0)
    , y_err(0.0)
    , z_err(0.0)
    , roll_err(0.0)
    , pitch_err(0.0)
    , yaw_err(0.0)  {
    }
  plot_msg_(const ContainerAllocator& _alloc)
    : x_err(0.0)
    , y_err(0.0)
    , z_err(0.0)
    , roll_err(0.0)
    , pitch_err(0.0)
    , yaw_err(0.0)  {
  (void)_alloc;
    }



   typedef double _x_err_type;
  _x_err_type x_err;

   typedef double _y_err_type;
  _y_err_type y_err;

   typedef double _z_err_type;
  _z_err_type z_err;

   typedef double _roll_err_type;
  _roll_err_type roll_err;

   typedef double _pitch_err_type;
  _pitch_err_type pitch_err;

   typedef double _yaw_err_type;
  _yaw_err_type yaw_err;





  typedef boost::shared_ptr< ::astronaut_controllers::plot_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::astronaut_controllers::plot_msg_<ContainerAllocator> const> ConstPtr;

}; // struct plot_msg_

typedef ::astronaut_controllers::plot_msg_<std::allocator<void> > plot_msg;

typedef boost::shared_ptr< ::astronaut_controllers::plot_msg > plot_msgPtr;
typedef boost::shared_ptr< ::astronaut_controllers::plot_msg const> plot_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::astronaut_controllers::plot_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::astronaut_controllers::plot_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace astronaut_controllers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'astronaut_controllers': ['/home/adrii/talos_public_ws/src/talos_astronaut/astronaut_controllers/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::astronaut_controllers::plot_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::astronaut_controllers::plot_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::astronaut_controllers::plot_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::astronaut_controllers::plot_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::astronaut_controllers::plot_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::astronaut_controllers::plot_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::astronaut_controllers::plot_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e3b1b0cf6c1e9ca2b791e3388980632";
  }

  static const char* value(const ::astronaut_controllers::plot_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e3b1b0cf6c1e9caULL;
  static const uint64_t static_value2 = 0x2b791e3388980632ULL;
};

template<class ContainerAllocator>
struct DataType< ::astronaut_controllers::plot_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "astronaut_controllers/plot_msg";
  }

  static const char* value(const ::astronaut_controllers::plot_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::astronaut_controllers::plot_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_err\n\
float64 y_err\n\
float64 z_err\n\
float64 roll_err\n\
float64 pitch_err\n\
float64 yaw_err\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::astronaut_controllers::plot_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::astronaut_controllers::plot_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_err);
      stream.next(m.y_err);
      stream.next(m.z_err);
      stream.next(m.roll_err);
      stream.next(m.pitch_err);
      stream.next(m.yaw_err);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct plot_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::astronaut_controllers::plot_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::astronaut_controllers::plot_msg_<ContainerAllocator>& v)
  {
    s << indent << "x_err: ";
    Printer<double>::stream(s, indent + "  ", v.x_err);
    s << indent << "y_err: ";
    Printer<double>::stream(s, indent + "  ", v.y_err);
    s << indent << "z_err: ";
    Printer<double>::stream(s, indent + "  ", v.z_err);
    s << indent << "roll_err: ";
    Printer<double>::stream(s, indent + "  ", v.roll_err);
    s << indent << "pitch_err: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_err);
    s << indent << "yaw_err: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_err);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASTRONAUT_CONTROLLERS_MESSAGE_PLOT_MSG_H
